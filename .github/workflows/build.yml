name: Build and Upload Debian Live Image

on:
  workflow_dispatch:
    inputs:
      custom_packages:
        description: '请输入要安装的软件包（英文逗号分隔，不能有空格）'
        required: false
        default: ''
      debian_version:
        description: '请选择Debian版本'
        required: true
        default: 'bullseye'
        type: choice
        options:
          - bullseye
          - bookworm
          - sid
      architecture:
        description: '请选择架构'
        required: true
        default: 'amd64'
        type: choice
        options:
          - amd64
          - i386
  schedule:
    - cron: '0 0 * * *'  # 每天午夜运行

jobs:
  build_manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    container:
      image: "debian:latest"
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y live-build xorriso

      - name: Create live-build directory
        run: |
          mkdir -p /live-build

      - name: Run lb config to generate configuration files
        run: |
          cd /live-build
          lb config --distribution ${{ github.event.inputs.debian_version }} --architecture ${{ github.event.inputs.architecture }} --debian-installer live

      - name: Add custom packages to packages.list (if provided)
        run: |
          cd /live-build
          mkdir -p config/package-lists
          echo "debian-installer-launcher,${{ github.event.inputs.custom_packages }}" | tr ',' '\n' > config/package-lists/custom.list.chroot

      - name: Build Debian Live Image
        run: |
          cd /live-build
          lb build

      - name: Create and upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}_debian_${{ github.event.inputs.debian_version }}_${{ github.event.inputs.architecture }}
          name: v${{ github.run_number }}_debian_${{ github.event.inputs.debian_version }}_${{ github.event.inputs.architecture }}
          body: "谢谢使用"
          files: |
            /live-build/*.iso
          token: ${{ secrets.GITHUB_TOKEN }}
      
      
  build_scheduled:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    container:
      image: "debian:latest"
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y live-build xorriso

      - name: Create live-build directory
        run: |
          mkdir -p /live-build

      - name: Run lb config to generate configuration files
        run: |
          cd /live-build
          lb config
      - name: Add custom packages to packages.list (if provided)
        run: |
          cd /live-build
          mkdir -p config/package-lists
          echo "debian-installer-launcher debootstrap" > config/package-lists/custom.list.chroot

      - name: Build Debian Live Image
        run: |
          cd /live-build
          lb build
          echo "VER=$(date +'%Y%m%d')_debian_latest">>$GITHUB_ENV

      - name: Create and upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VER }}
          name: ${{ env.VER }}
          body: "谢谢使用"
          files: |
            /live-build/*.iso
          token: ${{ secrets.GITHUB_TOKEN }}

  
  download_to_123pan:
    name: Push ISO to 123Pan via proxy
    runs-on: ubuntu-latest          # 不用容器，避免权限/工具问题
    needs:                        # 等 ISO 上传完再启动
      - build_manual
      - build_scheduled
    if: always() && (needs.build_manual.result == 'success' || needs.build_scheduled.result == 'success')
    steps:
      - name: Get release tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag="v${{ github.run_number }}_debian_${{ github.event.inputs.debian_version }}_${{ github.event.inputs.architecture }}"
          else
            tag="$(date +'%Y%m%d')_debian_latest"
          fi
          echo "TAG=$tag" >> $GITHUB_OUTPUT

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch ISO download link
        id: link
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          url=$(gh release view "${{ steps.tag.outputs.TAG }}" --json assets -q '.assets[0].url')
          echo "ISO_URL=https://gh.llkk.cc/$url" >> $GITHUB_OUTPUT
          echo "FILE_NAME=${{ steps.tag.outputs.TAG }}.iso"  >> $GITHUB_OUTPUT

      - name: Trigger 123Pan offline download
        run: |
          curl -X POST "https://open-api.123pan.com/api/v1/offline/download" \
            -H "Authorization: Bearer ${{ secrets.PAN123_API_TOKEN }}" \
            -H "Platform: open_platform" \
            -H "Content-Type: application/json" \
            -d "{\"url\":\"${{ steps.link.outputs.ISO_URL }}\",
                 \"dirID\": ${{ secrets.PAN123_FOLDER_ID }},
                 \"fileName\":\"${{ steps.link.outputs.FILE_NAME }}\"}"
