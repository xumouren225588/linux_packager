name: Build and Upload Debian Live Image

on:
  workflow_dispatch:
    inputs:
      custom_packages:
        description: '请输入要安装的软件包（英文逗号分隔，不能有空格）'
        required: false
        default: ''
      debian_version:
        description: '请选择Debian版本'
        required: true
        default: 'bullseye'
        type: choice
        options:
          - bullseye
          - bookworm
          - sid
      architecture:
        description: '请选择架构'
        required: true
        default: 'amd64'
        type: choice
        options:
          - amd64
          - i386
  schedule:
    - cron: '0 0 * * *'  # 每天午夜运行

jobs:
  build_manual:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    container:
      image: "debian:latest"
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y live-build xorriso

      - name: Create live-build directory
        run: |
          mkdir -p /live-build

      - name: Run lb config to generate configuration files
        run: |
          cd /live-build
          lb config --distribution ${{ github.event.inputs.debian_version }} --architecture ${{ github.event.inputs.architecture }} --debian-installer live

      - name: Add custom packages to packages.list (if provided)
        run: |
          cd /live-build
          mkdir -p config/package-lists
          echo "debian-installer-launcher,${{ github.event.inputs.custom_packages }}" | tr ',' '\n' > config/package-lists/custom.list.chroot

      - name: Build Debian Live Image
        run: |
          cd /live-build
          lb build

      - name: Create and upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}_debian_${{ github.event.inputs.debian_version }}_${{ github.event.inputs.architecture }}
          name: v${{ github.run_number }}_debian_${{ github.event.inputs.debian_version }}_${{ github.event.inputs.architecture }}
          body: "谢谢使用"
          files: |
            /live-build/*.iso
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Push ISO to 123pan offline download
        env:
          API_TOKEN: ${{ secrets.PAN123_API_TOKEN }}
          FOLDER_ID: ${{ secrets.PAN123_FOLDER_ID }}
        run: |
          # 取第一个 ISO 下载地址
          ORIGINAL_URL=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VER || format('v{0}_debian_{1}_{2}', github.run_number, github.event.inputs.debian_version, github.event.inputs.architecture) }}" \
            | jq -r '.assets[0].browser_download_url')

          # 拼出代理加速 URL
          DOWNLOAD_LINK="https://gh.llkk.cc/$ORIGINAL_URL"

          FILE_NAME=$(basename "$ORIGINAL_URL")

          curl -X POST "https://open-api.123pan.com/api/v1/offline/download" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Platform: open_platform" \
            -H "Content-Type: application/json" \
            -d "{\"url\":\"$DOWNLOAD_LINK\", \"dirID\": $FOLDER_ID, \"fileName\":\"$FILE_NAME\"}"
  build_scheduled:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    container:
      image: "debian:latest"
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y live-build xorriso

      - name: Create live-build directory
        run: |
          mkdir -p /live-build

      - name: Run lb config to generate configuration files
        run: |
          cd /live-build
          lb config
      - name: Add custom packages to packages.list (if provided)
        run: |
          cd /live-build
          mkdir -p config/package-lists
          echo "debian-installer-launcher debootstrap" > config/package-lists/custom.list.chroot

      - name: Build Debian Live Image
        run: |
          cd /live-build
          lb build
          echo "VER=$(date +'%Y%m%d')_debian_latest">>$GITHUB_ENV

      - name: Create and upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VER }}
          name: ${{ env.VER }}
          body: "谢谢使用"
      - name: Push ISO to 123pan offline download
        env:
          API_TOKEN: ${{ secrets.PAN123_API_TOKEN }}
          FOLDER_ID: ${{ secrets.PAN123_FOLDER_ID }}
        run: |
          # 取第一个 ISO 下载地址
          ORIGINAL_URL=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VER || format('v{0}_debian_{1}_{2}', github.run_number, github.event.inputs.debian_version, github.event.inputs.architecture) }}" \
            | jq -r '.assets[0].browser_download_url')

          # 拼出代理加速 URL
          DOWNLOAD_LINK="https://gh.llkk.cc/$ORIGINAL_URL"

          FILE_NAME=$(basename "$ORIGINAL_URL")

          curl -X POST "https://open-api.123pan.com/api/v1/offline/download" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Platform: open_platform" \
            -H "Content-Type: application/json" \
            -d "{\"url\":\"$DOWNLOAD_LINK\", \"dirID\": $FOLDER_ID, \"fileName\":\"$FILE_NAME\"}"
          files: |
            /live-build/*.iso
          token: ${{ secrets.GITHUB_TOKEN }}
