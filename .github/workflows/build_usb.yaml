name: 构建可写入 U 盘的 Ubuntu 系统（仅支持 UEFI 启动）
on:
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: '选择 Ubuntu 版本（例如 jammy 或 noble）'
        required: true
        default: 'noble'
        type: choice
        options:
          - jammy
          - noble
      packages:
        description: '预装软件包列表（每个软件包的名字之间以空格分隔）'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true

      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap squashfs-tools xorriso grub-efi-amd64 mtools

      - name: 创建基础系统
        run: |
          set -e
          mkdir -p ~/ubuntu-usb
          cd ~/ubuntu-usb
          sudo debootstrap --arch=amd64 ${{ github.event.inputs.ubuntu_version }} chroot http://archive.ubuntu.com/ubuntu/

          sudo mount --bind /dev chroot/dev
          sudo mount --bind /run chroot/run
          sudo mount --bind /proc chroot/proc
          sudo mount -t efivarfs efivarfs chroot/sys/firmware/efi/efivars  # 挂载 efivarfs

          echo "deb http://archive.ubuntu.com/ubuntu ${{ github.event.inputs.ubuntu_version }} universe" | sudo tee -a chroot/etc/apt/sources.list
          echo "deb http://archive.ubuntu.com/ubuntu ${{ github.event.inputs.ubuntu_version }}-updates universe" | sudo tee -a chroot/etc/apt/sources.list

          # 安装必要的软件包
          sudo chroot chroot /bin/bash -c "apt-get update && apt-get install -y linux-image-generic systemd-sysv grub-efi-amd64 ${{ github.event.inputs.packages }}"

          # 设置 root 用户密码
          sudo chroot chroot /bin/bash -c "echo -e '1234\n1234' | passwd root"

          # 配置 GRUB UEFI
          sudo chroot chroot /bin/bash -c "mkdir -p /boot/efi/EFI/BOOT"
          sudo chroot chroot /bin/bash -c "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Ubuntu --recheck"

          # 创建 GRUB 配置文件
          sudo chroot chroot /bin/bash -c "cat <<EOF > /boot/grub/grub.cfg
          set timeout=5
          set default=0

          # 自动搜索包含 vmlinuz 的设备
          search --set=root --file /boot/vmlinuz

          menuentry 'Ubuntu on USB' {
              linux /boot/vmlinuz-$(ls /boot/vmlinuz-* | sed 's/.*vmlinuz-//') root=\${root} ro quiet splash
              initrd /boot/initrd.img-$(ls /boot/initrd.img-* | sed 's/.*initrd.img-//')
          }
          EOF"

          sudo umount chroot/dev
          sudo umount chroot/run
          sudo umount chroot/proc
          sudo umount chroot/sys/firmware/efi/efivars  # 卸载 efivarfs

      - name: 创建可启动镜像
        run: |
          sudo mke2fs -F -t ext4 -L "Ubuntu USB" -d ~/ubuntu-usb/chroot ~/ubuntu-usb/ubuntu-usb.img 4G

          # 使用 xorriso 生成仅支持 UEFI 的 ISO 镜像
          sudo xorriso -as mkisofs -J -R -joliet-long -udf \
          -e boot/efi/EFI/BOOT/bootx64.efi -no-emul-boot \
          -o ~/ubuntu-usb/ubuntu-usb.iso ~/ubuntu-usb

      - name: 设置版本号
        run: echo "VERSION=v${{ github.run_number }}_usb" >> $GITHUB_ENV

      - name: 压缩
        run: |
          gzip -8 -k ~/ubuntu-usb/ubuntu-usb.iso

      - name: 分割文件
        run: |
          split -b 1G ~/ubuntu-usb/ubuntu-usb.iso.gz ./part_  # 按 1GB 分割文件

      - name: 创建并上传 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}  # 使用推送的标签名
          name: ${{ env.VERSION }}  # Release 名称
          body: "请先合并下载的所有文件再使用"  # Release 描述
          files: |
            ./part_*
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用默认的 GITHUB_TOKEN

      - name: 清理工作目录
        run: |
          sudo rm -rf ~/ubuntu-usb
