
name: 构建U盘ubuntu镜像
on:
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: '选择 Ubuntu 版本（例如 jammy 或 noble）'
        required: true
        default: 'noble'
        type: choice
        options:
          - jammy
          - noble
      packages:
        description: '需要安装的软件包列表（软件包名称之间用空格分隔，不需要请留空）'
        required: false
        default: ''
        type: string
      mirror_url:
        description: '写入u盘后使用的镜像站地址'
        required: true
        default: 'https://archive.ubuntu.com/ubuntu/'
        type: choice
        options:
          - https://archive.ubuntu.com/ubuntu/
          - https://mirrors.aliyun.com/ubuntu/
          - https://mirrors.tuna.tsinghua.edu.cn/ubuntu/
      
      dsp:
        description: '自定义安装脚本在仓库中的路径（以“/”作为路径分隔符）'
        required: false
        type: string
      
      

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 隐藏机密
        uses: hugcabbage/action-hide-sensitive-inputs@v1
        with:
          exclude_inputs: ubuntu_version,packages,mirror_url
      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true

      - name: 检出仓库
        uses: actions/checkout@v4
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap xorriso grub-efi-amd64 mtools e2fsprogs
      - name: 创建并挂载ubuntu-usb.img
        run: |
          mkdir -p ~/ubuntu-usb
          cd ~/ubuntu-usb
          # 创建一个空的img文件，大小根据实际需求调整
          sudo dd if=/dev/zero of=ubuntu-usb.img bs=1M count=4096
          # 使用 parted 创建分区表
          sudo parted ubuntu-usb.img --script \
            mklabel gpt \
            mkpart ESP fat32 1MiB 101MiB \
            set 1 boot on \
            mkpart primary ext4 101MiB 99%
            # 挂载镜像文件并格式化分区
            sudo kpartx -av ubuntu-usb.img
            sleep 5  # 等待设备映射完成
            sudo mkfs.fat -F 32 /dev/mapper/loop0p1
            sudo mkfs.ext4 /dev/mapper/loop0p2
          sudo mkdir -p root
          sudo mount /dev/mapper/loop0p2 root
      
      - name: 创建基础系统
        run: |
          cd ~/ubuntu-usb
          sudo debootstrap --arch=amd64 ${{ github.event.inputs.ubuntu_version }} root https://archive.ubuntu.com/ubuntu/
          sudo mount --bind /dev root/dev
          sudo mount --bind /run root/run
          sudo mount --bind /proc root/proc

          echo "deb https://archive.ubuntu.com/ubuntu/ ${{ github.event.inputs.ubuntu_version }} universe" | sudo tee -a root/etc/apt/sources.list
          echo "deb https://archive.ubuntu.com/ubuntu/ ${{ github.event.inputs.ubuntu_version }}-updates universe" | sudo tee -a root/etc/apt/sources.list
          sudo chroot root /bin/bash -c "apt-get update && apt-get install -y linux-image-generic ntp partclone grub-efi-amd64 mtools e2fsprogs"
          
      
      - name: 设置efi
        run: |
          cd ~/ubuntu-usb
          sudo mkdir -p root/mnt/efib
          sudo chroot root /bin/bash -c "mount /dev/mapper/loop0p1 /mnt/efib"
          sudo chroot root /bin/bash -c "sudo grub-install --target=x86_64-efi --efi-directory=/mnt/efib --bootloader-id=GRUB"
          sudo chroot root /bin/bash -c "umount -l /mnt/efib"
          sudo chroot root /bin/bash -c "dd if=/dev/mapper/loop0p1 of=/efi.img bs=1M count=100"
      - name: 创建安装脚本
        run: |
          if [ "${{ github.event.inputs.dsp }}" != "" ]; then
            sudo mkdir -p ~/ubuntu-usb/root/install
            sudo cp ${{ github.event.inputs.dsp }} ~/ubuntu-usb/root/install/install.sh
          fi
          cd ~/ubuntu-usb
          # 创建 rc-local.service 文件
          cat <<EOF | sudo tee root/etc/systemd/system/rc-local.service
          [Unit]
          Description=/etc/rc.local Compatibility
          ConditionPathExists=/etc/rc.local

          [Service]
          Type=forking
          ExecStart=/etc/rc.local start
          TimeoutSec=0
          StandardOutput=tty
          RemainAfterExit=yes
          SysVStartPriority=99

          [Install]
          WantedBy=multi-user.target
          EOF

          
          cat <<EOF | sudo tee root/usr/bin/ubuntu-install
          #!/bin/bash

          # 确保脚本以root权限运行
          if [ "$(id -u)" -ne 0 ]; then
              echo "该脚本需要root权限运行" 1>&2
              exit 1
          fi
          sudo systemctl enable rc-local
          sudo systemctl start rc-local

          cat <<INNER_EOF | sudo tee /etc/rc.local
          #!/bin/bash
          
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          timedatectl set-timezone Asia/Shanghai
          
          # 配置NTP服务器为阿里云NTP服务器
          echo "server ntp1.aliyun.com" > /etc/ntp.conf
          echo "server ntp2.aliyun.com" >> /etc/ntp.conf

          # 重启NTP服务
          systemctl restart ntp
          # 修改镜像站为用户选择的
          sudo sed -i 's|${{ github.event.inputs.mirror_url }}|http://archive.ubuntu.com/ubuntu/|g' /etc/apt/sources.list
          sudo sed -i 's|${{ github.event.inputs.mirror_url }}|https://archive.ubuntu.com/ubuntu/|g' /etc/apt/sources.list
          if [ "${{ github.event.inputs.packages }}" = "" ]; then
              sudo rm /etc/rc.local
              reboot
          fi
          # 安装用户输入的软件包
          sudo apt-get update && apt-get install -y ${{ github.event.inputs.packages }}
          if [ "${{ github.event.inputs.dsp }}" != "" ]; then
              sudo sh /install/install.sh
              sudo rm -rf /install
          fi
          # 删除自启动脚本
          sudo rm /etc/rc.local
          reboot
          INNER_EOF
          chmod +x /etc/rc.local

          # 获取根目录所在设备路径
          root_device=$(mount | grep ' / ' | awk '{print $1}')

          # 获取目标磁盘
          target_disk=$(lsblk -d | grep -m 1 'sd' | awk '{print $1}')

          # 如果未获取到目标磁盘，则尝试使用根目录所在设备路径
          if [ -z "$target_disk" ]; then
              target_disk=${root_device//\/dev\//}
          fi

          # 检查目标磁盘是否存在
          if [ -z "$target_disk" ]; then
              echo "无法找到目标磁盘"
              exit 1
          fi

          # 确认操作
          echo "目标磁盘为 /dev/$target_disk，这将清除该磁盘上的所有数据。"
          read -p "是否继续？(y/n): " confirm
          if [ "$confirm" != "y" ]; then
              echo "操作已取消"
              exit 1
          fi

          # 清空目标磁盘
          echo "清空目标磁盘 /dev/$target_disk..."
          dd if=/dev/zero of=/dev/$target_disk bs=1M count=1

          # 使用parted创建GPT分区表并分区
          echo "创建GPT分区表并分区..."
          sudo parted /dev/$target_disk --script \
              mklabel gpt \
              mkpart ESP fat32 1MiB 101MiB \
              set 1 boot on \
              mkpart primary ext4 101MiB 99%

          # 等待分区表生效
          sleep 5

          # 格式化分区
          echo "格式化分区..."
          sudo mkfs.vfat -F32 /dev/${target_disk}1
          sudo mkfs.ext4 /dev/${target_disk}2

          # 挂载目标分区
          echo "挂载目标分区..."
          mkdir -p /mnt/target_root /mnt/target_efi
          sudo mount /dev/${target_disk}2 /mnt/target_root
          sudo mount /dev/${target_disk}1 /mnt/target_efi

          # 使用partclone克隆EFI分区
          echo "正在写入EFI分区..."
          sudo partclone.fat -c -s /efi.img -o /mnt/target_efi

          # 使用partclone克隆根目录
          echo "正在写入根目录..."
          sudo partclone.ext4 -c -s ${root_device} -o /mnt/target_root

          # 卸载目标分区
          echo "卸载目标分区..."
          sudo umount /mnt/target_root
          sudo umount /mnt/target_efi

          # 删除挂载点目录
          sudo rmdir /mnt/target_root /mnt/target_efi

          echo "安装完成，系统将在5秒后重启"
          sleep 5
          reboot
          EOF
          sudo chmod +x root/usr/bin/ubuntu-install
          sudo chroot root /bin/bash -c "echo -e '1234\n1234' | passwd root"
          sudo umount -l root/dev
          sudo umount -l root/run
          sudo umount -l root/proc
          sudo umount -l root
          sudo kpartx -dv ubuntu-usb.img
          sleep 10
          sudo rmdir root

      - name: 设置版本号
        run: echo "VERSION=v${{ github.run_number }}_usb" >> $GITHUB_ENV

      - name: 压缩img镜像
        run: |
          gzip -8 -k ~/ubuntu-usb/ubuntu-usb.img
          sudo cp ~/ubuntu-usb/ubuntu-usb.img.gz ubuntu-usb.img.gz

      
      - name: 创建并上传 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}  # 使用推送的标签名
          name: ${{ env.VERSION }}  # Release 名称
          body: "root密码为1234"  # Release 描述
          files: |
            ./ubuntu-usb.img.gz
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用默认的 GITHUB_TOKEN

      - name: 清理工作目录
        run: |
          sudo rm -rf ~/ubuntu-usb

