name: 构建U盘引导

on:
  push:
  #schedule:
    
    #- cron: '0 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu_version: [jammy, noble]
        architecture: [amd64, arm64]
    container:
      image: ubuntu:latest
      options: --platform linux/${{ matrix.architecture }}
    steps:
      #- name: 清理磁盘空间
        #uses: jlumbroso/free-disk-space@main
        #with:
          #tool-cache: false
          #android: true

      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装依赖
        run: |
          
          apt-get update
          apt-get install -y debootstrap xorriso mtools e2fsprogs refind

      - name: 创建boot.img
        run: |
          mkdir -p ~/ubuntu-usb
          cd ~/ubuntu-usb
          dd if=/dev/zero of=boot.img bs=1M count=5120
          
          mkfs.fat -F 32 boot.img
          

      - name: 安装rEFInd
        run: |
          cd ~/ubuntu-usb
          refind-install --usedefault boot.img
          sleep 5
          mkdir -p boot
          mount boot.img boot
      - name: 创建efi.img并复制boot.img内容
        run: |
          cd ~/ubuntu-usb
          dd if=boot.img of=efi.img bs=1M count=100
          

      - name: 复制宿主机内核文件到boot.img
        run: |
          cd ~/ubuntu-usb
          cp /boot/vmlinuz-$(uname -r) boot/vmlinuz

      - name: 创建initrd.img
        run: |
          cd ~/ubuntu-usb
          dd if=/dev/zero of=initrd.img bs=1M count=3072
          
          mkfs.ext4 initrd.img
          mkdir -p root
          mount initrd.img root

      - name: 创建基础系统
        run: |
          cd ~/ubuntu-usb
          debootstrap --arch=${{ matrix.architecture }} ${{ matrix.ubuntu_version }} root
          cp efi.img root/efi.img
          mount --bind /dev root/dev
          mount --bind /run root/run
          mount --bind /proc root/proc
          echo "deb https://archive.ubuntu.com/ubuntu/ ${{ matrix.ubuntu_version }} universe" | tee -a root/etc/apt/sources.list
          echo "deb https://archive.ubuntu.com/ubuntu/ ${{ matrix.ubuntu_version }}-updates universe" | tee -a root/etc/apt/sources.list
          chroot root /bin/bash -c "apt-get update && apt-get install -y python3-pip"
          if [ "${{ matrix.ubuntu_version }}" = "noble" ]; then
              chroot root /bin/bash -c "pip3 install --break-system-packages flask"
          else
              chroot root /bin/bash -c "pip3 install flask"
          fi
          

      - name: 复制install目录到root目录
        run: |
          cp -r install ~/ubuntu-usb/root/install
          cd ~/ubuntu-usb

      - name: 启用rc-local服务并创建rc.local脚本
        run: |
          cd ~/ubuntu-usb
          # 创建 rc.local 脚本
          cat <<EOF | tee root/etc/rc.local
          #!/bin/bash
          # rc.local script to run app.py on startup
          cd /install
          python3 app.py
          EOF
          chmod +x root/etc/rc.local
          # 创建 systemd 服务文件
          cat <<EOF | tee root/etc/systemd/system/rc-local.service
          [Unit]
          Description=/etc/rc.local Compatibility
          ConditionPathExists=/etc/rc.local

          [Service]
          Type=forking
          ExecStart=/etc/rc.local start
          TimeoutSec=0
          StandardOutput=tty
          RemainAfterExit=yes
          SysVStartPriority=99

          [Install]
          WantedBy=multi-user.target
          EOF
          # 启用 rc-local 服务
          chroot root /bin/bash -c "systemctl enable rc-local.service"
          chroot root /bin/bash -c "echo -e '1234\n1234' | passwd root"

      - name: 复制initrd.img到boot.img
        run: |
          cd ~/ubuntu-usb
          umount -l root
          rm -rf root
          cp initrd.img boot/initrd.img
          rm -f initrd.img
          umount -l boot
          sleep 5
          rm -rf boot

      - name: 分割boot.img
        run: |
          split -b 1G ~/ubuntu-usb/boot.img ./boot_part_

      - name: 设置版本号
        run: echo "VERSION=$(date+"%Y%m%d_%H-%M")_usb_${{ matrix.ubuntu_version }}_${{ matrix.architecture }}" >> $GITHUB_ENV

      - name: 创建并上传 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: "root密码为1234"
          files: |
            ./boot_part_*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理工作目录
        run: |
          rm -rf ~/ubuntu-usb
